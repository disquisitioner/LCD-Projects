/*
 * Various versions of my Orangemoose logo as follows:
 *
 * ROWFIRST_MODEL_64 = 64x48 bitmap using the Adafruit GFX
 *      row-by-row layout model
 * VERTCHUNK_MODEL_64 = 64x48 bitmap using the Sparkfun
 *      MicroView 16 bit vertical chunk layout model
 * VERTCHUNK_MODEL_84 = 84x48 bitmap using the Sparkfun
 *      MicroView 16 bit vertical chunk layout model
 *
 * In all cases the logo bitmap will be in a byte-oriented
 * array named 'orangemoose'.
 *
 * Use #define & #undef to select the one you want
 *
 * Author: David Bryant (david@orangemoose.com)
 */

 #define ROWFIRST_MODEL_64
 #undef VERTCHUNK_MODEL_64
 #undef VERTCHUNK_MODEL_84


#ifdef ROWFIRST_MODEL_64
/*
 * Orangemoose logo in a 64x48 (WxH) bitmap organized in 
 * row order, e.g. the first horizontal row of the array is
 * the first row of pixels at the top of the image and the
 * last horizontal row of the array is the last row of pixels
 * at the bottm of the image.  
 * 
 * This is the layout needed for the Adafruit GFX library,
 * which also requires that bitmaps be defined in PROGMEM
 */
static const unsigned char PROGMEM orangemoose[384] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* 1 */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x93, 0x00, 0x00, 0xC9, 0x00, 0x00,  /* 8 */

0x00, 0x01, 0xF7, 0x00, 0x00, 0xEF, 0x80, 0x00,
0x00, 0x0F, 0xFF, 0x10, 0x08, 0xFF, 0xF0, 0x00,
0x00, 0x07, 0xFF, 0x38, 0x1C, 0XFF, 0xE0, 0x00, 
0x00, 0x07, 0xFF, 0xB0, 0x0D, 0xFF, 0xE0, 0x00,
0x00, 0x1F, 0xFF, 0xB0, 0x0D, 0xFF, 0xF8, 0x00,
0x00, 0x0F, 0xFF, 0xF8, 0x1F, 0xFF, 0xF0, 0x00,
0x00, 0x07, 0xFF, 0xFC, 0x3F, 0xFF, 0xE0, 0x00,
0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00,  /* 16 */

0x00, 0x1F, 0xFF, 0x8F, 0xF1, 0xFF, 0xF8, 0x00,
0x00, 0x1F, 0xFE, 0x7D, 0xBE, 0x7F, 0xF8, 0x00,
0x00, 0x07, 0xF8, 0x79, 0x9E, 0x1F, 0xE0, 0x00,
0x00, 0x00, 0x00, 0x1F, 0xF8, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x1F, 0xF8, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00,  /* 24 */

0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x73, 0xCE, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x31, 0x8C, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x1F, 0xF8, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* 32 */

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* 40 */

0x45, 0x67, 0x2C, 0x79, 0xCD, 0x18, 0xC7, 0x1C,
0x45, 0x90, 0xB2, 0x8A, 0x2A, 0xA5, 0x28, 0x22,
0x45, 0x07, 0xA2, 0x8B, 0xEA, 0xA5, 0x27, 0x3E,
0x45, 0x08, 0xA2, 0x7A, 0x08, 0xA5, 0x20, 0xA0,
0x39, 0x07, 0xA2, 0x09, 0xC8, 0x98, 0xCF, 0x1C,
0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* 48 */
};

#endif // ROWFIRST_MODEL_64

#ifdef VERTCHUNK_MODEL_84
/*
 * Orangemoose logo in a 84x48 (WxH) bitmap organized in 
 * two-byte column order as used by MicroView display memory
 * as well as the Sparkfun example code for the Nokia 5110 LCD.
 * (Sparkfun doesn't have a general-purpose graphics/imaging
 * library comparable to Adafruit's. Also, since Sparkfun helped
 * the GeekAmmo folks with the MicroView it's not surprising they
 * have the same bitmap & display memory format.)  Specifically 
 * this means that the first horizontal row of the array covers
 * the top 16 bits of the image organized left to right.  For
 * details on this layout scheme see the documentation at
 * http://learn.microview.io/font/creating-fonts-for-microview.html
 *
 * Also, for MicroView the display memory isn't in PROGMEM
 * so that isn't required here.
 */
const char orangemoose[504] = {
// ROW0, BYTE0 to BYTE83
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
// ROW1, BYTE84 to BYTE167
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x32, 0xFE, 0xFE, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xF8, 0xE0, 0xFC, 0xFE, 0xE4, 0xC0, 0x80, 0x80,
0x80, 0x80, 0xC0, 0xE4, 0xFE, 0xFC, 0xE0, 0xF8, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFE, 0xFE, 0x32, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

// ROW2, BYTE168 to BYTE251
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x07, 0x07, 0x07,
0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0xC6, 0xE6, 0xF6, 0xFF, 0xFB, 0xF9, 0xFF,
0xFF, 0xF9, 0xFB, 0xFF, 0xF6, 0xE6, 0xC6, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07,
0x07, 0x07, 0x07, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

// ROW3, BYTE252 to BYTE335
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0x3F, 0x67, 0x67, 0x6F, 0x7F,
0x7F, 0x6F, 0x67, 0x67, 0x3F, 0x1F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

// ROW4, BYTE336 to BYTE419
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xC0, 0x20, 0x20, 0x20, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
// ROW5, BYTE420 to BYTE503
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0F, 0x10, 0x10, 0x10, 0x0F, 0x00, 0x1F, 0x02, 0x01, 0x01, 0x02, 0x08, 0x15, 0x15, 0x15,
0x1E, 0x00, 0x1F, 0x02, 0x01, 0x01, 0x1E, 0x00, 0x06, 0x29, 0x29, 0x29, 0x1F, 0x00, 0x0E, 0x15,
0x15, 0x15, 0x06, 0x00, 0x1F, 0x01, 0x06, 0x01, 0x1E, 0x00, 0x0E, 0x11, 0x11, 0x0E, 0x00, 0x0E,
0x11, 0x11, 0x0E, 0x00, 0x12, 0x15, 0x15, 0x15, 0x08, 0x00, 0x0E, 0x15, 0x15, 0x15, 0x06, 0x00,   
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

#endif  // VERTCHUNK_MODEL_84

#ifdef VERTCHUNK_MODEL_64
/*
 * A 64x48 (WxH) version using the same MicroView/Sparkfun 
 * memory model.
 */

const char orangemoose[504] = {
// ROW0, BYTE0 to BYTE83
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
// ROW1, BYTE84 to BYTE167
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x32, 0xFE, 0xFE, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xF8, 0xE0, 0xFC, 0xFE, 0xE4, 0xC0, 0x80, 0x80,
0x80, 0x80, 0xC0, 0xE4, 0xFE, 0xFC, 0xE0, 0xF8, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFE, 0xFE, 0x32, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

// ROW2, BYTE168 to BYTE251
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x07, 0x07, 0x07,
0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0xC6, 0xE6, 0xF6, 0xFF, 0xFB, 0xF9, 0xFF,
0xFF, 0xF9, 0xFB, 0xFF, 0xF6, 0xE6, 0xC6, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07,
0x07, 0x07, 0x07, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

// ROW3, BYTE252 to BYTE335
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0x3F, 0x67, 0x67, 0x6F, 0x7F,
0x7F, 0x6F, 0x67, 0x67, 0x3F, 0x1F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

// ROW4, BYTE336 to BYTE419
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xC0, 0x20, 0x20, 0x20, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	
// ROW5, BYTE420 to BYTE503
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0F, 0x10, 0x10, 0x10, 0x0F, 0x00, 0x1F, 0x02, 0x01, 0x01, 0x02, 0x08, 0x15, 0x15, 0x15,
0x1E, 0x00, 0x1F, 0x02, 0x01, 0x01, 0x1E, 0x00, 0x06, 0x29, 0x29, 0x29, 0x1F, 0x00, 0x0E, 0x15,
0x15, 0x15, 0x06, 0x00, 0x1F, 0x01, 0x06, 0x01, 0x1E, 0x00, 0x0E, 0x11, 0x11, 0x0E, 0x00, 0x0E,
0x11, 0x11, 0x0E, 0x00, 0x12, 0x15, 0x15, 0x15, 0x08, 0x00, 0x0E, 0x15, 0x15, 0x15, 0x06, 0x00,   
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

#endif // VERTCHUNK_MODEL_64